#!/usr/bin/env python
# -*- coding utf-8 -*-
#
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Author: Markus Ritschel
# eMail:  kontakt@markusritschel.de
# Date:   23/04/2020
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#
from __future__ import absolute_import, division, print_function, with_statement

import numpy as np
import pandas as pd
import logging
from tqdm.auto import tqdm
from pathlib import Path
from .helpers import check_input_for_duplicates


logger = logging.getLogger(__name__)

this_dir = Path(__file__).resolve().parents[0]

OCEANVIEW_VARIABLES = pd.read_csv(this_dir/'oceanview_variables.csv', index_col='ID')
SYSTEM_STATES = pd.read_csv(this_dir/'system_states.csv', sep=';', index_col='state')


def _read_oceanpack_internal_logfile(file, **kwargs):
    """This routine reads a log file that was generated by the OceanPack and retrieved via USB download."""
    """Read an OceanPack log file that was retrieved via USB download. (Files are Windows-formatted.)"""
    with open(file, 'r', encoding='Windows 1252') as f:
        line_counter = 0
        while True:
            line = f.readline()
            line_counter += 1
            if line.startswith('@RATE'):
                break
            elif line.startswith('@SENSOR'):
                sensors = line.strip().split(',')
            elif line.startswith('@NAME'):
                names = line.strip().split(',')
            elif line.startswith('@UNIT'):
                units = line.strip().split(',')

    df = pd.read_csv(file, sep=',', skiprows=line_counter, names=names, parse_dates={'datetime': ['DATE', 'TIME']},
                     encoding='iso-8859-1',
                     usecols=np.arange(len(names)), **kwargs)  # usecols omits last column which gets created if lines end with a colon

    # parse date and time and set as index
    # df['datetime'] = pd.to_datetime(df['datetime'])
    df.set_index('datetime', inplace=True)

    # clear data
    df.drop(['@NAME', 'DATE', 'TIME', 'DATE_TIME'], axis=1, inplace=True, errors='ignore')

    return df  # TODO: maybe export as xarray and also add units etc. as attributes


def _read_oceanview_stream_file(file):
    """This routine reads a log file that was generated by the OceanView software.
    These files usually do not have a header and each line starts with '$PSDS0'. """
    df = pd.read_csv(file, names=OCEANVIEW_VARIABLES['name'],
                     encoding='iso-8859-1',
                     parse_dates={'datetime': ['date','time']})
    df.set_index('datetime', inplace=True)
    return df


@check_input_for_duplicates
def read_oceanpack(files) -> pd.DataFrame:
    """Read a single or multiple log files into a pd.DataFrame dataset."""
    if isinstance(files, str):
        files = [files]
    elif not isinstance(files, list):
        raise IOError("Input must be either str or list")

    file_types = []
    df_list = []

    for file in tqdm(files, unit='file'):
        logger.debug("Processing %s", file)
        with open(file, 'r', encoding='iso-8859-1') as f:
            first_line = f.readline()
            if first_line.startswith('$PSDS0'):
                logger.debug("First line of file starts with '$PSDS0'. Assume OceanView data format.")
                file_types.append('oceanview')
                read_routine = _read_oceanview_stream_file
            elif first_line.startswith('SW Build Datum'):
                logger.debug("Found header at the beginning of file. Assume OceanPack-internal data format.")
                file_types.append('internal')
                read_routine = _read_oceanpack_internal_logfile
            else:
                logger.warning("Couldn't detect header or stream-file-like format in %s. File will be skipped.", file)
                file_types.append('unknown')
                continue
        df_ = read_routine(file)
        df_list.append(df_)

    df = pd.concat(df_list)

    if len(set(file_types)) > 1:
        logger.warning("Files appear to be not all of the same type. Please check your data!")

    df.index = pd.to_datetime(df.index, errors='coerce')
    df = df.loc[df.index.dropna()]
    df = df[~df.index.duplicated(keep='first')]

    for col in df.columns:
        try:
            df[col] = pd.to_numeric(df[col])
        except:
            logger.warning(f'Cannot convert {col} to numeric')

    df.sort_index(axis=0, inplace=True, ascending=True)

    return df
